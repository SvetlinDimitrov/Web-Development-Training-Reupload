Section 1: Data Definition Language (DDL) – 40 pts
01. Table Design
create table addresses
(
    id INT primary key auto_increment,
    name varchar(50) not null
);
create table categories
(
    id INT primary key auto_increment,
    name varchar(10) not null
);

create table offices
(
    id INT primary key auto_increment,
    workspace_capacity INT not null,
    website varchar(50) ,
    address_id INT not null ,
    constraint foreign key (address_id) references addresses(id)
);

create table employees
(
    id INT primary key auto_increment,
    first_name varchar(30) not null ,
    last_name varchar(30) not null ,
    age INT not null ,
    salary decimal(10 ,2) not null ,
    job_title varchar(20) not null ,
    happiness_level char(1) not null
);

create table teams
(
    id INT primary key auto_increment,
    name varchar(40) not null ,
    office_id INT not null ,
    leader_id INT not null not null unique ,
    constraint foreign key (office_id) references offices(id),
    constraint foreign key (leader_id) references employees(id)
);

create table games
(
    id INT primary key auto_increment,
    name varchar(50) not null unique ,
    description text ,
    rating float default (5.5) not null ,
    budget decimal(10 ,2) not null ,
    release_date date,
    team_id INT not null ,
    constraint foreign key (team_id) references teams(id)
);

create table games_categories
(
    game_id INT not null ,
    category_id INT not null not null,
    constraint primary key (game_id , category_id) ,
    constraint foreign key (game_id) references games(id),
    constraint foreign key (category_id) references categories(id)
);

02. Insert
insert into games(name , rating ,budget , team_id)
(select lower(reverse(substr(t.name ,2))),
        t.id,
        t.leader_id*1000,
        t.id
 from teams as t
 where id between 1 and 9);


03. Update
update employees
set salary = salary + 1000
where age < 40 and
      id in(select leader_id from teams) and
      salary<=5000;


04. Delete
delete from games
where id not in (select game_id from games_categories) and
      release_date is null;

Section 3: Querying – 50 pts
05. Employees
select 
    first_name,last_name,age,salary,happiness_level
from employees
order by salary , id;

06. Addresses of the teams
select
    teams.name team_name,
    a.name address_name,
    char_length(a.name) count_address_chars
from teams
join offices o on o.id = teams.office_id
join addresses a on a.id = o.address_id
where website is not null
order by team_name,address_name;

07. Categories Info
select
    o.name ,
    count(g.name) games_count,
    round(avg(g.budget),2) avg_budget,
    max(g.rating) max_rating
from categories as o
join games_categories gc on o.id = gc.category_id
join games g on g.id = gc.game_id
group by o.name
having max_rating >= 9.5
order by games_count desc , o.name;

08. Games of 2022
select name,
       release_date,
       concat(substr(description, 1, 10), '...') summary,
       CASE
           WHEN monthname(release_date)
               in ('February', 'January', 'March')
               THEN 'Q1'
           WHEN monthname(release_date)
               in ('April', 'May', 'June')
               THEN 'Q2'
           WHEN monthname(release_date)
               in ('July', 'August', 'September')
               THEN 'Q3'
           ELSE 'Q4'
        END quarter,
    (select name from teams where team_id = teams.id) team_name
from games
where year(release_date) = 2022
  and month(release_date) % 2 = 0
  and name like '%2'
order by quarter;

09. Full info for games
select
    o.name,
    if(o.budget < 50000 , 'Normal budget' , 'Insufficient budget') budget_name,
    t.name team_name,
    a.name address_name
from games as o
join teams t on t.id = o.team_id
join offices o2 on o2.id = t.office_id
join addresses a on a.id = o2.address_id
where o.release_date is null
  and o.id not in(select game_id from games_categories)
order by o.name;

Section 4: Programmability – 30 pts
10. Find all basic information for a game
create function udf_game_info_by_name (game_name VARCHAR (20))
returns text
deterministic
begin
    return (
        select concat('The ' , g.name , ' is developed by a ', t.name , ' in an office with an address ' , a.name)
        from games as g
        join teams t on g.team_id = t.id
        join offices o on o.id = t.office_id
        join addresses a on o.address_id = a.id
        where g.name = game_name
        );
end 

11. Update Budget of the Games
create procedure udp_update_budget(min_game_rating float)
begin
    update games
        set budget = budget+100000 , release_date = DATE_ADD(release_date , interval 1 year )
    where games.id not in (select game_id from games_categories) and
          rating >= min_game_rating and
          release_date is not null;
end 


