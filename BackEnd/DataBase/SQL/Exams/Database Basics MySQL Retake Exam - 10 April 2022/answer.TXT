Section 1: Data Definition Language (DDL) – 40 pts
01. Table Design

create database softuni_imdb;
use softuni_imdb;

create table countries(
	id INT auto_increment primary key,
    name varchar(30) not null unique ,
    continent varchar(30) not null ,
    currency varchar(5) not null
);
create table genres(
	id INT auto_increment primary key,
    name varchar(50) not null unique
);

create table actors(
	id INT auto_increment primary key,
    first_name varchar(50) not null,
    last_name varchar(50) not null,
    birthdate date not null,
    height INT,
    awards INT,
    country_id INT not null,
    constraint fk_actors_country
    foreign key (country_id) references countries(id)
);

create table movies_additional_info(
	id INT auto_increment primary key,
    rating DECIMAL(10,2) not null,
    runtime INT not null,
    picture_url varchar(80) not null,
    budget DECIMAL(10,2),
    release_date date not null,
    has_subtitles boolean,
    description text
);
create table movies(
	id INT auto_increment primary key,
    title varchar(70) not null unique ,
	country_id INT not null,
	movie_info_id INT not null unique,
    constraint fk_movies_country 
    foreign key (country_id) references countries(id),
    constraint fk_movies_movies_additional_info
    foreign key (movie_info_id) references movies_additional_info(id)
);

create table movies_actors(
	movie_id INT ,
	actor_id INT ,
    constraint fk_movies_actors_movies
    foreign key (movie_id) references movies(id),
    constraint fk_movies_actors_avtors
    foreign key (actor_id) references actors(id)
);

create table genres_movies(
	genre_id INT ,
	movie_id INT ,
    constraint fk_genres_movies_genres
    foreign key (genre_id) references genres(id),
    constraint  fk_genres_movies_movies
    foreign key (movie_id) references movies(id)
);

Section 2: Data Manipulation Language (DML) – 30 pts

02. Insert
insert into 
actors(first_name , last_name ,birthdate,height,awards,country_id)
(
	select reverse(first_name),
    reverse(last_name),
	date_sub(birthdate , interval 2 day),
    height +10 ,
    country_id,
    3
    from actors
    where id <= 10
);

03. Update
update `movies_additional_info`
set runtime = runtime -10
where id >= 15 and id <= 25;

04. Delete
delete from `countries`
where id not in(select country_id from movies);

Section 3: Querying – 50 pts

05. Countries
select * from countries
order by currency desc , id;

06. Old movies
select m.id,
m.title,
mai.runtime,
mai.budget,
mai.release_date
from `movies_additional_info` as mai
join movies as m on m.movie_info_id = mai.id
where year(release_date) between 1996 and 1999
order by runtime , id
limit 20;

07. Movie casting
select
concat(first_name, ' ' , last_name) as full_name,
concat(reverse(last_name) , char_length(last_name) , '@cast.com') as email,
2022-year(birthdate) as age,
height
from actors
where id not in(select actor_id from movies_actors)
order by height;

08. International festival
select
name,
(select count(*) from movies where country_id = c.id) as movies_count
from `countries` as c
having movies_count >=7
order by name desc;

09. Rating system
select
m.title,
CASE
    WHEN rating <= 4 THEN 'poor'
    WHEN rating > 4 and rating <=7 THEN 'good'
    ELSE 'excellent'
END as rating,
IF(has_subtitles, "english", "-") as subtitles,
budget
from `movies` as m
join `movies_additional_info` as mai on mai.id = m.movie_info_id
order by budget desc;

Section 4: Programmability – 30 pts

10. History movies
CREATE FUNCTION udf_actor_history_movies_count(full_name VARCHAR(50))        
    RETURNS  int
    deterministic
    BEGIN 
      return (select count(*) 
      from `movies_actors` as ma
		join `actors` as a on a.id = ma.actor_id
        join `genres_movies` as gm on gm.movie_id = ma.movie_id
        join `genres` as g on g.id = gm.genre_id
        where concat(a.first_name , ' ' , a.last_name) = full_name and
        'history' in (g.name)
      );
  END 

  11. Movie awards
  CREATE PROCEDURE  udp_award_movie(movie_title VARCHAR(50))
begin 
 UPDATE `actors` as a
 Set a.awards = a.awards + 1
 where a.id in (
	select actor_id from movies_actors
    where movie_id = (
		select id from movies
        where title = movie_title
    )
 );
END 

