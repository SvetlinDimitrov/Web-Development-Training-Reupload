Section 1: Data Definition Language (DDL) – 40 pts
create database Restaurant;
use Restaurant;

create table products(
	id int auto_increment primary key ,
    name varchar(30) not null unique,
    type varchar(30) not null,
    price  decimal(10,2) not null
);
create table clients(
	id int auto_increment primary key ,
    first_name varchar(50) not null ,
    last_name varchar(50) not null ,
    birthdate date not null,
    card varchar(50),
    review text
);

create table tables(
	id int auto_increment primary key ,
    floor INT not null,
    reserved boolean,
    capacity INT not null
);
create table waiters(
	id int auto_increment primary key ,
    first_name varchar(50) not null ,
    last_name varchar(50) not null ,
    email varchar(50) not null ,
    phone varchar(50),
    salary decimal(10,2)
);

create table orders(
	id int auto_increment primary key ,
    table_id INT not null,
    waiter_id INT not null,
    order_time TIME not null,
    payed_status boolean,
    constraint fk_orders_tables foreign key (table_id) references tables(id),
    constraint fk_orders_waiters foreign key (waiter_id) references waiters(id)
);

create table orders_clients(
	order_id INT ,
	client_id INT ,
	constraint fk_orders_clients_orders
    foreign key (order_id) references orders(id),
    constraint fk_orders_clients_clients
    foreign key (client_id) references clients(id)
);

create table orders_products(
	order_id INT ,
	product_id INT ,
	constraint fk_orders_products_orders
    foreign key (order_id) references orders(id),
    constraint fk_orders_products_products
    foreign key (product_id) references products(id)
);

02. Insert
insert into products(name , type , price)
select 
    concat(last_name ,' ','specialty'),
    'Cocktail',
    ceil(salary * 0.01)
    from waiters as w
    where id > 6;

03. Update
update orders 
set table_id = table_id -1
where id between 12 and 23;


04. Delete
delete from waiters 
where id not in (select waiter_id from orders);

05. Clients
select * 
from clients
order by birthdate desc, id desc;

06. Birthdate
select first_name,
last_name,
birthdate,
review
from clients
where card is null and year(birthdate) between 1978 and 1993
order by last_name desc, id
limit 5;


07. Accounts
select
concat(last_name , first_name , char_length(first_name) , "Restaurant") 
as  'username'  ,
REVERSE(substring(email , 2,12)) as password
from waiters
where salary is not null
order by password desc;

08. Top from menu
select
id,
name,
(select count(*)
from orders_products as op
where op.product_id = id ) as count
from `products`
having count >= 5
order by count desc , name;

09. Availability
select
t.id as table_id,
t.capacity ,
(select count(*) from `orders_clients`
where order_id in (select o.id from orders as o where table_id = t.id))
 as count_clients,
CASE
    WHEN capacity > (select count(*) from `orders_clients`
where order_id in (select o.id from orders as o where table_id = t.id)) 
THEN 'Free seats'
   
   WHEN capacity = (select count(*) from `orders_clients`
where order_id in (select o.id from orders as o where table_id = t.id)) 
THEN 'Full'
    
    ELSE 'Extra seats'
END as availability

from `tables` as t
where floor = 1
having count_clients > 0
order by t.id desc;

Section 4: Programmability – 30 pts
10. Extract bill
CREATE FUNCTION udf_client_bill(full_name VARCHAR(50))     
    RETURNS  DECIMAL(19,2)
    deterministic
    BEGIN 
      return (SELECT sum(p.price)
		FROM clients as c
        join orders_clients as oc on oc.client_id = c.id
        join `orders_products` as op on op.order_id = oc.order_id
        join products as p on op.product_id = p.id
        where concat(c.first_name , ' ', c.last_name) = full_name);
END 

11. Happy hour
