Section 1: Data Definition Language (DDL) – 40 pts

01. Table Design
create table countries
(
    id Int primary key auto_increment,
    name varchar(40) not null unique
);
create table cities
(
    id Int primary key auto_increment,
    name varchar(40) not null unique,
    population int ,
    country_id int not null ,
    constraint foreign key (country_id) references countries(id)
);

create table universities
(
    id Int primary key auto_increment,
    name varchar(60) not null unique,
    address varchar(80) not null unique,
    tuition_fee decimal(19,2) not null ,
    number_of_staff int,
    city_id int  ,
    constraint foreign key (city_id) references cities(id)
);

create table students
(
    id Int primary key auto_increment,
    first_name varchar(40) not null,
    last_name varchar(40) not null,
    age int ,
    phone varchar(20) not null unique ,
    email varchar(255) not null unique ,
    is_graduated tinyint(1) not null ,
    city_id int  ,
    constraint foreign key (city_id) references cities(id)
);

create table courses
(
    id Int primary key auto_increment,
    name varchar(40) not null unique ,
    duration_hours decimal(19,2),
    start_date date ,
    teacher_name varchar(60) not null unique ,
    description text ,
    university_id int  ,
    constraint foreign key (university_id) references universities(id)
);
create table students_courses
(

    grade decimal(19,2) not null,
    student_id int not null ,
    course_id int not null ,
    constraint foreign key (student_id) references students(id),
    constraint foreign key (course_id) references courses(id)
);

02. Insert
insert into courses(name , duration_hours , start_date,teacher_name,description , university_id)
(select concat(teacher_name , ' ' , 'course'),
        char_length(name)/10,
        date_add(start_date , INTERVAL 5 DAY),
        reverse(teacher_name),
        concat('Course ' , teacher_name,reverse(description)),
        day(start_date)
 from courses
 where id <=5)

 03. Update
 update universities
set tuition_fee = tuition_fee+300
where id between 5 and 12;

04. Delete
delete from universities
where number_of_staff is null;

Section 3: Querying – 50 pts

05. Cities
select id,
       name,
       population,
       country_id
from cities
order by population desc;

06. Students age
select first_name,
       last_name,
       age,
       phone,
       email
from students
where age >=21
order by first_name desc ,email,id
limit 10;

07. New students
select concat(first_name , ' ' , last_name) full_name,
       substr(email , 2,10) username,
       reverse(phone) password
from students
where id not in(select student_id from students_courses)
order by password desc;

08. Students count
select count(students.id) students_count,
       u.name university_name
from students
join students_courses sc on students.id = sc.student_id
join courses c on c.id = sc.course_id
join universities u on u.id = c.university_id
group by u.name
having students_count >= 8
order by students_count desc , university_name desc;

09. Price rankings
select u.name university_name,
       c.name city_name,
       u.address,
       CASE
           WHEN u.tuition_fee < 800 THEN 'cheap'
           WHEN u.tuition_fee >= 800 and u.tuition_fee < 1200 THEN 'normal'
           WHEN u.tuition_fee >= 1200 and u.tuition_fee < 2500 THEN 'high'
           ELSE 'expensive'
        END price_rank,
    tuition_fee
from universities u
join cities c on c.id = u.city_id
order by tuition_fee;

Section 4: Programmability – 30 pts

10. Average grades
create function udf_average_alumni_grade_by_course_name(course_name VARCHAR(60))
    returns decimal(19,2)
    deterministic
begin
    return (select avg(sc.grade)
            from courses c
                     join students_courses sc on c.id = sc.course_id
                     join students s on s.id = sc.student_id
            where c.name = course_name and s.is_graduated
            group by c.name);
end;

11. Graduate students
create procedure udp_graduate_all_students_by_year(year_started INT)
begin
    update students
    set is_graduated = true
    where students.id in
          (
            select student_id
            from students_courses
            join courses c on c.id = students_courses.course_id
            where year(c.start_date) = year_started
            );
end;