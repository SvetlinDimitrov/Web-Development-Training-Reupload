01. Employees with Salary Above 35000
CREATE PROCEDURE usp_get_employees_salary_above_35000()
    BEGIN 
      (select first_name , last_name
		from employees
		where salary > 35000
		order by first_name , last_name , employee_id);
  END 

02. Employees with Salary Above Number
  CREATE PROCEDURE usp_get_employees_salary_above(salary decimal(16,4))
    BEGIN 
      (select first_name , last_name
		from employees as e
		where e.salary >= salary
		order by first_name , last_name , employee_id);
  END 

03. Town Names Starting With
  CREATE PROCEDURE usp_get_towns_starting_with(prefix Varchar(45))
    BEGIN 
      (select name as town_name
		from towns
		where left(name , char_length(prefix)) = prefix
		order by town_name);
  END 

04. Employees from Town
CREATE PROCEDURE usp_get_employees_from_town (town_name Varchar(45))
    BEGIN 
      select first_name , last_name
      from employees as e
      where e.address_id = (
		select address_id 
        from addresses
        where town_id = (
			select town_id
            from towns 
            where name = town_name
        ))
        order by first_name,last_name,employee_id;
  END 

05. Salary Level Function
CREATE FUNCTION ufn_get_salary_level(salary decimal(16,4))        
    RETURNS  varchar(45)
    deterministic
    BEGIN 
    declare answer varchar(45);
    set answer =  IF(salary < 30000, 'Low' , "Average");
	set answer =  IF(salary between 30000 and 50000, 'Average' , "High");
    return answer;
  END 

  06. Employees by Salary Level
  CREATE PROCEDURE usp_get_employees_by_salary_level(levelSalary Varchar(45))
    BEGIN 
      select e.first_name , e.last_name
      from employees as e
      where levelSalary = (
		select 
			CASE
				WHEN e2.salary < 30000 THEN 'Low'
				WHEN e2.salary between 30000 and 50000  THEN 'Average'
				ELSE 'High'
			END
            from employees as e2
            where e.employee_id = e2.employee_id
      )
        order by first_name desc,last_name desc;
  END 

  07. Define Function
  CREATE FUNCTION ufn_is_word_comprised(set_of_letters varchar(50), word varchar(50))       
    RETURNS  INT
    deterministic
    BEGIN 
	return word REGEXP (concat('^[',set_of_letters,']+$'));
  END 

  08. Find Full Name
  CREATE PROCEDURE usp_get_holders_full_name()
    BEGIN 
      select concat(first_name ,' ', last_name) as full_name
      from `account_holders`
	order by full_name , id;
  END 


9. People with Balance Higher Than 
CREATE PROCEDURE usp_get_holders_with_balance_higher_than(param1 decimal(16,4))
    BEGIN 
      select first_name,
      last_name
      from `account_holders` as ah
      join accounts as a on ah.id = a.account_holder_id
      group by ah.id
      having sum(a.balance) > param1
	order by ah.id;
  END 

10. Future Value Function
 CREATE FUNCTION ufn_calculate_future_value(sum decimal(16,4),
 yearly_interest_rate double,
 number_of_years INT)    
    RETURNS DECIMAL(16,4)
    deterministic
    begin
	return sum *(pow(1+yearly_interest_rate , number_of_years));
  END 


11. Calculating Interest(50/50)
CREATE PROCEDURE usp_calculate_future_value_for_account(param1 INT,
param2 double)
    BEGIN 
     select 
      ah.id as account_id,
      first_name,
      last_name,
      cast(sum(balance) as decimal(16,4)) as current_balance,
      cast(cast(sum(balance)as decimal(16,4)) *(pow(1+param2, 5)) as decimal(16,4)) as balance_in_5_years
      from `account_holders` as ah
      join accounts as a on ah.id = a.account_holder_id
      where a.id = param1
      group by a.id
	order by ah.id;
  END 

12. Deposit Money

