01. One-To-One Relationship
create table passports 
(
	passport_id Int auto_increment primary key,
    passport_number varchar(8) unique
);

create table people 
(
	person_id Int auto_increment primary key,
    first_name varchar(45),
    salary decimal(17 ,2) ,
    passport_id INT unique,
    constraint fk_people_passports
	FOREIGN KEY (passport_id) 
    REFERENCES passports(passport_id)
);

insert into passports (passport_id,passport_number) 
values (101,'N34FG21B'),(102,'K65LO4R7'),(103,'ZE657QP2');

insert into people (first_name,salary, passport_id) 
values ('Roberto',43300.00 ,102 ),('Tom',56100.00 ,103 ),('Yana',60200.00 ,101 );

02. One-To-Many Relationship (83/100)
create table manufacturers 
(
	manufacturer_id Int auto_increment primary key,
    `name` varchar(45),
    established_on date
);

create table models 
(
	model_id Int auto_increment primary key,
    `name` varchar(45),
    manufacturer_id INT ,
    constraint fk_manufacturers_models
	FOREIGN KEY (manufacturer_id) 
    REFERENCES manufacturers(manufacturer_id)
);

insert into manufacturers (`name`,established_on) 
values ('BMW','1916-03-01') ,('Tesla','2003-01-01'),('Lada','1966-05-01');

insert into models (model_id,`name`, manufacturer_id) 
values (101,'X1',1),(102,'i6',1),(103,'Model S',2),
(104,'Model X',2),(105,'Model 3',3),(106,'Nova',3)



03. Many-To-Many Relationship
create table students 
(
	student_id Int auto_increment primary key,
    `name` varchar(45)
);

create table exams 
(
	exam_id Int auto_increment primary key,
    `name` varchar(45)
);

create table students_exams 
(
	student_id INT not null,
    exam_id INT NOT NULL,
    constraint pk_students_exams
    primary key (student_id,exam_id),
    constraint fk_student
    foreign key (student_id)
    references students(student_id),
    constraint fk_exam
    foreign key (exam_id)
    references exams(exam_id)
);

insert into students (`name`) 
values ('Mila') ,('Toni'),('Ron');

insert into exams (exam_id,`name`) 
values (101,'Spring MVC'),(102,'Neo4j'),(103,'Oracle 11g');

insert into students_exams (student_id,exam_id) 
values (1,101),(1,102),(2,101),(3,103),(2,102),(2,103);




04. Self-Referencing
create table teachers 
(
	teacher_id Int auto_increment primary key,
    `name` varchar(45),
    manager_id INT
);

insert into teachers (teacher_id , name , manager_id)
values(101 , 'John' , NULL),(102 , 'Maya' , 106),
(103 , 'Silvia' , 106),(104 , 'Ted' , 105),(105 , 'Mark' , 101),
(106 , 'Greta' , 101);

alter table teachers
add constraint fk
foreign key (manager_id)
references teachers(teacher_id);



05. Online Store Database
create table item_types (
	item_type_id INT(11) primary key auto_increment ,
    `name` VARCHAR(50)
);
create table items (
	item_id INT(11) primary key auto_increment ,
    `name` VARCHAR(50),
    item_type_id INT(11),
    constraint fk_items_item_types
    foreign key (item_type_id)
    references item_types(item_type_id)
);
create table cities (
	city_id INT(11) primary key auto_increment ,
    `name` VARCHAR(50)
);

create table customers (
	customer_id INT(11) primary key auto_increment ,
    `name` VARCHAR(50),
    birthday Date,
    city_id INT(11),
    constraint fk_customers_cities
    foreign key (city_id)
    references cities(city_id)
);

create table orders (
	order_id INT(11) primary key auto_increment ,
    customer_id INT(11),
    constraint fk_order_customer
    foreign key (customer_id)
    references customers(customer_id)
);

create table order_items (
	order_id INT(11),
    item_id INT(11),
    constraint pr_orders_items
	primary key (order_id , item_id),
    
    constraint fk_order
    foreign key (order_id)
    references orders(order_id),
    
    constraint fk_item
    foreign key (item_id)
    references items(item_id)
);



06. University Database
create table subjects (
	subject_id INT(11) primary key auto_increment ,
    subject_name VARCHAR(50)
);
create table majors (
	major_id INT(11) primary key auto_increment ,
    `name` VARCHAR(50)
);

create table students (
	student_id INT(11) primary key auto_increment ,
    student_number VARCHAR(12),
    student_name VARCHAR(50),
    major_id INT(11),
    constraint fk_student_major
    foreign key (major_id)
    references majors(major_id)
);

create table payments (
	payment_id INT(11) primary key auto_increment ,
    payment_date DATE,
    payment_amount DECIMAL(8,2),
    student_id INT(11),
    constraint fk_paumnet_student
    foreign key (student_id)
    references students(student_id)
);

create table agenda (
	student_id INT(11),
    subject_id INT(11),
    constraint pr_student_subject
	primary key (student_id , subject_id),
    
    constraint fk_student
    foreign key (student_id)
    references students(student_id),
    
    constraint fk_subject
    foreign key (subject_id)
    references subjects(subject_id)
);


09. Peaks in Rila
select 
(	select mountain_range 
	from `mountains` as m 
	where m.id = p.mountain_id
) as mountain_range,
p.peak_name,
p.elevation as peak_elevation
from peaks as p
having mountain_range = 'Rila'
order by peak_elevation desc;
